generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id          String           @id @default(uuid())
  action      String
  resource    String
  description String?
  roles       RolePermission[]

  @@unique([action, resource])
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
}

model Shop {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  address         String?
  contactNumber   String?
  email           String?
  operatingHours  String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  managerId       String?
  billings        Billing[]
  restockRequests RestockRequest[]
  manager         User?            @relation("ShopManager", fields: [managerId], references: [publicId])
  inventory       ShopInventory[]
}

model User {
  id            Int            @id @default(autoincrement())
  name          String?
  role          String?
  roleId        String?
  email         String?        @unique
  contact       String?
  password      String
  publicId      String         @unique
  shopIds       String[]       @default([])
  notifications Notification[]
  managedShops  Shop[]         @relation("ShopManager")
  Role          Role?          @relation(fields: [roleId], references: [id])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Flavor {
  id        String    @id @default(uuid())
  name      String    @unique
  imageUrl  String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id                  String           @id @default(uuid())
  sku                 String           @unique
  name                String
  description         String?
  categoryId          String
  flavorId            String
  legacyPackagingType String?          @map("packagingType") @ignore
  quantityInLiters    Float
  unitSize            Float
  unitMeasurement     String
  unitPrice           Float
  totalStock          Int
  minStockLevel       Int?
  barcode             String?
  imageUrl            String?
  isActive            Boolean          @default(true)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  packagingTypeId     String?
  category            Category         @relation(fields: [categoryId], references: [id])
  flavor              Flavor           @relation(fields: [flavorId], references: [id])
  packagingType       PackagingType?   @relation(fields: [packagingTypeId], references: [id])
  restockRequests     RestockRequest[]
  shopInventory       ShopInventory[]
}

model PackagingType {
  id        String    @id @default(uuid())
  name      String    @unique
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  products  Product[]
}

model ShopInventory {
  id              String    @id @default(uuid())
  shopId          String
  productId       String
  currentStock    Int       @default(0)
  minStockPerItem Int?
  lowStockAlertsEnabled Boolean @default(true)
  lastRestockDate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isActive        Boolean   @default(true)
  product         Product   @relation(fields: [productId], references: [id])
  shop            Shop      @relation(fields: [shopId], references: [id])

  @@unique([shopId, productId])
}

model RestockRequest {
  id              String   @id @default(uuid())
  shopId          String
  productId       String
  requestedAmount Int
  status          String   @default("pending")
  notes           String?
  hidden          Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  product         Product  @relation(fields: [productId], references: [id])
  shop            Shop     @relation(fields: [shopId], references: [id])
}

model Billing {
  id            String   @id @default(uuid())
  shopId        String
  customerName  String?
  customerEmail String?
  items         Json
  subtotal      Float
  tax           Float    @default(0)
  discount      Float    @default(0)
  total         Float
  paymentStatus String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String?
  createdByRole String?
  invoiceNumber String?  @unique
  shop          Shop     @relation(fields: [shopId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  message   String
  isRead    Boolean  @default(false)
  hidden    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [publicId])
}

model AuditLog {
  id        String   @id
  type      String
  action    String
  entity    String
  entityId  String
  userId    String?
  shopId    String?
  meta      Json?
  createdAt DateTime @default(now())

  @@index([createdAt(sort: Desc)])
  @@index([shopId])
}
