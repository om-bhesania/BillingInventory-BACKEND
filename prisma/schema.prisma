// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id
  name      String?
  role      String?
  roleId    String?
  email     String? @unique
  contact   String?
  password  String
  isActive  Boolean?
  shopName  String?
  shopId    String?
  Role      Role?   @relation(fields: [roleId], references: [id])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdBy         String?
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(uuid())
  action      String // e.g., "create", "read", "update", "delete"
  resource    String // e.g., "inventory", "user", "orders"
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([roleId, permissionId])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy         String?
  products    Product[]
}

model Product {
  id               String           @id @default(uuid())
  sku              String           @unique
  name             String
  description      String?
  categoryId       String
  category         Category         @relation(fields: [categoryId], references: [id])
  packagingType    String? // Cup, Cone, Tub, Brick
  quantityInLiters Float // Total content in liters
  unitSize         Float // E.g., 1.0, 150.0
  unitMeasurement  String // Liter, ml, scoop, tub, etc.
  unitPrice        Float // Price per custom unit
  totalStock       Int // Available units in stock
  minStockLevel    Int? // Optional: for low-stock alerts
  barcode          String? // Optional: POS/barcode scanning
  imageUrl         String? // Optional product image
  isActive         Boolean          @default(true)
  // Relations
  flavorId         String
  shopInventory    ShopInventory[]
  flavor           Flavor           @relation(fields: [flavorId], references: [id])
  RestockRequest   RestockRequest[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdBy         String?
}

model Flavor {
  id        String   @id @default(uuid())
  name      String   @unique
  imageUrl  String? // optional image preview
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  products Product[]
}

model RestockRequest {
  id           String   @id @default(uuid())
  productId    String
  product      Product  @relation(fields: [productId], references: [id])
  shopId       String // if you want to link it to a specific shop
  requestedQty Int // Quantity the operator wants to restock
  status       String // e.g., 'Pending', 'Approved', 'Rejected'
  shop         Shop     @relation(fields: [shopId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?
}

model Shop {
  id                String           @id @default(uuid())
  name              String
  location          String?
  address           String?
  contactNumber     String?
  email             String?
  operatingHours    String?
  isActive          Boolean          @default(true)
  openingDate       DateTime?
  managerName       String?
  maxCapacity       Int?             // Maximum number of customers
  description       String?
  logoUrl           String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdBy         String?  
  // Relations
  restockRequests   RestockRequest[]
  inventory         ShopInventory[]
}

model ShopInventory {
  id               String   @id @default(uuid())
  shopId           String
  shop             Shop     @relation(fields: [shopId], references: [id])
  productId        String
  product          Product  @relation(fields: [productId], references: [id])
  currentStock     Int      // Current quantity in this specific shop
  lastRestockDate  DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  createdBy        String?

  @@unique([shopId, productId])
}