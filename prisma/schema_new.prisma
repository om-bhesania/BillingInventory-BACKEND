// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(uuid())
  action      String
  resource    String
  description String?
  roles       RolePermission[]

  @@unique([action, resource])
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([roleId, permissionId])
}

model Shop {
  id             String          @id @default(uuid())
  name           String          @unique
  description    String?
  location       String?
  address        String?
  contactNumber  String?
  email          String?
  operatingHours String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  // Shop ownership/management relations
  ownerId        Int?           @unique
  owner          User?          @relation("ShopOwner", fields: [ownerId], references: [id])
  managerId      Int?           @unique
  manager        User?          @relation("ShopManager", fields: [managerId], references: [id])
  // Inventory relations
  inventory      ShopInventory[]
  restockRequests RestockRequest[]
}

model User {
  id          Int      @id @default(autoincrement())
  publicId    String   @unique @default(dbgenerated("encode(gen_random_bytes(8), 'hex')"))
  name        String?
  role        String?
  roleId      String?
  email       String?  @unique
  contact     String?
  password    String
  Role        Role?    @relation(fields: [roleId], references: [id])
  // Shop ownership/management - one user can only own/manage one shop
  ownedShop   Shop?    @relation("ShopOwner")
  managedShop Shop?    @relation("ShopManager")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Flavor {
  id        String    @id @default(uuid())
  name      String    @unique
  imageUrl  String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id               String           @id @default(uuid())
  sku              String           @unique
  name             String
  description      String?
  categoryId       String
  flavorId         String
  packagingType    String?
  quantityInLiters Float
  unitSize         Float
  unitMeasurement  String
  unitPrice        Float
  totalStock       Int
  minStockLevel    Int?
  barcode          String?
  imageUrl         String?
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  // Relations
  category         Category         @relation(fields: [categoryId], references: [id])
  flavor           Flavor           @relation(fields: [flavorId], references: [id])
  shopInventory    ShopInventory[]
  restockRequests  RestockRequest[]
}

model ShopInventory {
  id             String   @id @default(uuid())
  shopId         String
  productId      String
  currentStock   Int
  lastRestockDate DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  shop          Shop    @relation(fields: [shopId], references: [id])
  product       Product @relation(fields: [productId], references: [id])

  @@unique([shopId, productId])
}

model RestockRequest {
  id              String   @id @default(uuid())
  shopId          String
  productId       String
  requestedAmount Int
  status          String   @default("pending")
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  shop           Shop    @relation(fields: [shopId], references: [id])
  product        Product @relation(fields: [productId], references: [id])
}
